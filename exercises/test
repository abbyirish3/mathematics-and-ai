class Entity:
    
    # function to create an instance of "Entity"
    def __init__(self, name):
        # Add the name of the entity as its attribute
        self.name = name
        self.default_relations={}
        
    # function to add a relation that applies to all instances of this entity by default
    def add_default_relation(self, relation, entity):
        if relation not in self.default_relations:
            self.default_relations[relation] = []
        self.default_relations[relation].append(entity)
    
    
class Person(Entity):
    
    def __init__(self, name):
        # use function from parent class to create an instance of "Person"
        super().__init__(name)
        # implement as default that everyone likes puppies
        self.add_default_relation("likes", "Puppy")
    
    
class Animal(Entity):
    
    def __init__(self, name):
        # use function from parent class to create an instance of "Animal"
        super().__init__(name)
        # implement as default that all animals want food
        self.add_default_relation("wants", "Treat")

        
class Relationship:
    
    def __init__(self, entity_name1, relation, entity_name2):
        self.entity1 = entity_name1
        self.relation = relation
        self.entity2 = entity_name2
        
    # function to convert relationship to a printable format    
    def __repr__(self):
        return f"{self.entity1} {self.relation} {self.entity2}"
        
        
class SemanticNetwork:
    
    def __init__(self):
        self.entities = {}
        self.relationships = []

        
    def add_entity(self, entity):
        
        if entity.name not in self.entities:
            # add entity
            self.entities[entity.name] = entity
            
            # add its default relations
            for relation, entity_names in entity.default_relations.items():
                for entity_name in entity_names:
                    if entity_name in self.entities:
                        entity2 = self.entities[entity_name]
                        self.relationships.append(
                            Relationship(entity, relation, entity2))

                        
    def add_relation(self, entity_name1, relation, entity_name2):
        
        if entity_name1 in self.entities and entity_name2 in self.entities:
            # find entities by their names
            entity1 = self.entities[entity_name1]
            entity2 = self.entities[entity_name2]
            self.relationships.append(Relationship(entity1, relation, entity2))

            
    def query(self, entity_name1, relation, entity_name2):
        
        if entity_name1 in self.entities and entity_name2 in self.entities:        
            # find entities by their names
            entity1 = self.entities[entity_name1]
            entity2 = self.entities[entity_name2]

            # search for the queried relationship
            for r in self.relationships:
                if r.entity1 == entity1 and r.entity2 == entity2:
                    if r.relation == relation:
                        return True
                    
        # return False if either entity or the relationship was not found
        return False
    

# Create a semantic network
network = SemanticNetwork()

# Add a puppy and treat
network.add_entity(Entity("Treat"))
network.add_entity(Animal("Puppy"))

# Add three characters 
network.add_entity(Person("Romeo"))
network.add_entity(Person("Juliet"))
network.add_entity(Person("Benvolio"))

# Add relationships
network.add_relation("Romeo", "knows", "Benvolio")
network.add_relation("Romeo", "knows", "Juliet")
network.add_relation("Romeo", "is cousin of", "Benvolio")
network.add_relation("Romeo", "is in love with", "Juliet")


# Query examples
print(network.query("Romeo", "knows", "Benvolio"))    # Output: True
print(network.query("Romeo", "likes", "Puppy")) # Output: True
print(network.query("Juliet", "is cousin of", "Benvolio")) # Output: False